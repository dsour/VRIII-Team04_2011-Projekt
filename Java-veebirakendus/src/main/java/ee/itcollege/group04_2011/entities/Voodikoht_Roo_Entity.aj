// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.group04_2011.entities;

import ee.itcollege.group04_2011.entities.Voodikoht;
import java.lang.Integer;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Voodikoht_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager Voodikoht.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer Voodikoht.version;
    
    public Integer Voodikoht.getVersion() {
        return this.version;
    }
    
    public void Voodikoht.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Voodikoht.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Voodikoht.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Voodikoht attached = Voodikoht.findVoodikoht(this.voodikohtId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Voodikoht.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Voodikoht.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Voodikoht Voodikoht.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Voodikoht merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Voodikoht.entityManager() {
        EntityManager em = new Voodikoht().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Voodikoht.countVoodikohts() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Voodikoht o", Long.class).getSingleResult();
    }
    
    public static List<Voodikoht> Voodikoht.findAllVoodikohts() {
        return entityManager().createQuery("SELECT o FROM Voodikoht o", Voodikoht.class).getResultList();
    }
    
    public static Voodikoht Voodikoht.findVoodikoht(int voodikohtId) {
        return entityManager().find(Voodikoht.class, voodikohtId);
    }
    
    public static List<Voodikoht> Voodikoht.findVoodikohtEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Voodikoht o", Voodikoht.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
